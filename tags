!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/luguimar/Documents/Common_Core_Repositories/42cursus_so_long/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT)	Makefile	/^$(LIBFT):$/;"	t
$(MLX)	Makefile	/^$(MLX): download-and-extract-mlx$/;"	t
$(NAME)	Makefile	/^$(NAME): $(MLX) ${OBJS} ${LIBFT}$/;"	t
$(NAME)	lib/libft/Makefile	/^$(NAME): ${OBJS}$/;"	t
.c.o	lib/libft/Makefile	/^.c.o:$/;"	t
42cursus_so_long	README.md	/^# 42cursus_so_long$/;"	c
A	include/so_long.h	/^	A = 97,$/;"	e	enum:e_key
A	include/so_long_bonus.h	/^	A = 97,$/;"	e	enum:e_key
BONUS	lib/libft/Makefile	/^BONUS = ft_lstnew.c ft_lstadd_front.c ft_lstadd_back.c ft_lstdelone.c ft_lstclear.c ft_lstiter.c/;"	m
BONUS_OBJS	Makefile	/^BONUS_OBJS = ${SRC_BONUS:.c=.o}$/;"	m
BUFFER_SIZE	lib/libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc -g$/;"	m
CC	lib/libft/Makefile	/^CC = cc -g$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	lib/libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
D	include/so_long.h	/^	D = 100,$/;"	e	enum:e_key
D	include/so_long_bonus.h	/^	D = 100,$/;"	e	enum:e_key
DOWN	include/so_long.h	/^	DOWN = 65364,$/;"	e	enum:e_key
DOWN	include/so_long_bonus.h	/^	DOWN = 65364,$/;"	e	enum:e_key
DOWNLOAD	Makefile	/^DOWNLOAD = wget -O$/;"	m
EMPTY	include/so_long.h	/^# define EMPTY	/;"	d
EMPTY	include/so_long_bonus.h	/^# define EMPTY	/;"	d
ESC	include/so_long.h	/^	ESC = 65307,$/;"	e	enum:e_key
ESC	include/so_long_bonus.h	/^	ESC = 65307,$/;"	e	enum:e_key
EXIT	include/so_long.h	/^# define EXIT	/;"	d
EXIT	include/so_long_bonus.h	/^# define EXIT	/;"	d
EXTRA	lib/libft/Makefile	/^EXTRA = ft_putnbr_base_fd.c ft_printf.c get_next_line.c get_next_line_utils.c free_array_of_stri/;"	m
EXTRACT	Makefile	/^EXTRACT = tar -xvf$/;"	m
GOLD	include/so_long.h	/^# define GOLD	/;"	d
GOLD	include/so_long_bonus.h	/^# define GOLD	/;"	d
INCLUDE	Makefile	/^INCLUDE = -I .$/;"	m
INCLUDE	lib/libft/Makefile	/^INCLUDE = -I .$/;"	m
LEFT	include/so_long.h	/^	LEFT = 65361,$/;"	e	enum:e_key
LEFT	include/so_long_bonus.h	/^	LEFT = 65361,$/;"	e	enum:e_key
LIBFT	Makefile	/^LIBFT = ${LIBFT_PATH}\/libft.a$/;"	m
LIBFT_H	lib/libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_PATH	Makefile	/^LIBFT_PATH = lib\/libft$/;"	m
LIBRARIES	Makefile	/^LIBRARIES = lib$/;"	m
MAKE	Makefile	/^MAKE = make -C$/;"	m
MINILIBX_FILE	Makefile	/^MINILIBX_FILE = minilibx-linux.tgz$/;"	m
MINILIBX_URL	Makefile	/^MINILIBX_URL = https:\/\/cdn.intra.42.fr\/document\/document\/21300\/minilibx-linux.tgz$/;"	m
MLX	Makefile	/^MLX = -L ${MLX_PATH} -lmlx -Ilmlx -lXext -lX11 -lm$/;"	m
MLX_PATH	Makefile	/^MLX_PATH = lib\/mlx$/;"	m
MOVE	Makefile	/^MOVE = mv$/;"	m
NAME	Makefile	/^NAME = so_long$/;"	m
NAME	lib/libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ${SRC:.c=.o}$/;"	m
OBJS	lib/libft/Makefile	/^OBJS = ${SRC:.c=.o}$/;"	m
PART1	lib/libft/Makefile	/^PART1 = ft_tolower.c ft_toupper.c ft_isprint.c ft_isascii.c ft_isalnum.c ft_isdigit.c ft_isalpha/;"	m
PART2	lib/libft/Makefile	/^PART2 = ft_itoa.c ft_strjoin.c ft_split.c ft_striteri.c ft_strmapi.c ft_substr.c ft_strtrim.c ft/;"	m
PLAYER_L	include/so_long.h	/^# define PLAYER_L	/;"	d
PLAYER_L	include/so_long_bonus.h	/^# define PLAYER_L	/;"	d
PLAYER_R	include/so_long.h	/^# define PLAYER_R	/;"	d
PLAYER_R	include/so_long_bonus.h	/^# define PLAYER_R	/;"	d
REMOVE	Makefile	/^REMOVE = rm -f$/;"	m
RIGHT	include/so_long.h	/^	RIGHT = 65363,$/;"	e	enum:e_key
RIGHT	include/so_long_bonus.h	/^	RIGHT = 65363,$/;"	e	enum:e_key
RM	lib/libft/Makefile	/^RM = rm -f$/;"	m
ROCK	include/so_long.h	/^# define ROCK	/;"	d
ROCK	include/so_long_bonus.h	/^# define ROCK	/;"	d
S	include/so_long.h	/^	S = 115,$/;"	e	enum:e_key
S	include/so_long_bonus.h	/^	S = 115,$/;"	e	enum:e_key
SIZE	include/so_long.h	/^# define SIZE	/;"	d
SIZE	include/so_long_bonus.h	/^# define SIZE	/;"	d
SO_LONG_BONUS_H	include/so_long_bonus.h	/^# define SO_LONG_BONUS_H$/;"	d
SO_LONG_H	include/so_long.h	/^# define SO_LONG_H$/;"	d
SRC	Makefile	/^SRC = src\/main.c src\/map_ckeck.c src\/flood_fill.c src\/map_check_extra.c src\/flood_fill_extr/;"	m
SRC	lib/libft/Makefile	/^SRC = ${PART1} ${PART2} ${BONUS} ${EXTRA}$/;"	m
SRC_BONUS	Makefile	/^SRC_BONUS = src_bonus\/main_bonus.c src_bonus\/map_ckeck_bonus.c src_bonus\/flood_fill_bonus.c s/;"	m
UP	include/so_long.h	/^	UP = 65362,$/;"	e	enum:e_key
UP	include/so_long_bonus.h	/^	UP = 65362,$/;"	e	enum:e_key
W	include/so_long.h	/^	W = 119,$/;"	e	enum:e_key
W	include/so_long_bonus.h	/^	W = 119,$/;"	e	enum:e_key
algcounter	lib/libft/ft_itoa.c	/^int	algcounter(int n)$/;"	f	typeref:typename:int
all	Makefile	/^all: ${NAME}$/;"	t
all	lib/libft/Makefile	/^all:	${NAME}$/;"	t
bigger	lib/libft/int_size_utils.c	/^int	bigger(int a, int b)$/;"	f	typeref:typename:int
bonus	Makefile	/^bonus: ${MLX} ${BONUS_OBJS} ${LIBFT}$/;"	t
check_extension	src/main.c	/^static int	check_extension(char *str, char *ext)$/;"	f	typeref:typename:int	file:
check_extension	src_bonus/main_bonus.c	/^static int	check_extension(char *str, char *ext)$/;"	f	typeref:typename:int	file:
check_map	src/map_ckeck.c	/^int	check_map(char *file, t_game *game)$/;"	f	typeref:typename:int
check_map	src_bonus/map_ckeck_bonus.c	/^int	check_map(char *file, t_game *game)$/;"	f	typeref:typename:int
check_map_aux	src_bonus/map_check_extra_bonus.c	/^int	check_map_aux(t_game *game)$/;"	f	typeref:typename:int
check_map_elements	src/map_ckeck.c	/^static int	check_map_elements(t_game *game, int i, int j)$/;"	f	typeref:typename:int	file:
check_map_elements	src_bonus/map_ckeck_bonus.c	/^static int	check_map_elements(t_game *game, int i, int j)$/;"	f	typeref:typename:int	file:
check_map_elements_extra	src/map_check_extra.c	/^int	check_map_elements_extra(t_game *game, int i, int j)$/;"	f	typeref:typename:int
check_map_elements_extra	src_bonus/map_check_extra_bonus.c	/^int	check_map_elements_extra(t_game *game, int i, int j)$/;"	f	typeref:typename:int
check_map_extra	src/map_ckeck.c	/^static int	check_map_extra(char *file, int fd, char **line, t_game *game)$/;"	f	typeref:typename:int	file:
check_map_extra	src_bonus/map_ckeck_bonus.c	/^static int	check_map_extra(char *file, int fd, char **line, t_game *game)$/;"	f	typeref:typename:int	file:
check_rectangle	src/map_ckeck.c	/^static int	check_rectangle(int fd, char **line, t_game *game)$/;"	f	typeref:typename:int	file:
check_rectangle	src_bonus/map_ckeck_bonus.c	/^static int	check_rectangle(int fd, char **line, t_game *game)$/;"	f	typeref:typename:int	file:
checktype	lib/libft/ft_printf.c	/^int	checktype(int ch, va_list args)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	lib/libft/Makefile	/^clean:$/;"	t
clean_stash	lib/libft/get_next_line.c	/^static char	*clean_stash(char *stash)$/;"	f	typeref:typename:char *	file:
collectibles	include/so_long.h	/^	int		collectibles;$/;"	m	struct:s_map	typeref:typename:int
collectibles	include/so_long_bonus.h	/^	int		collectibles;$/;"	m	struct:s_map	typeref:typename:int
cols	include/so_long.h	/^	int		cols;$/;"	m	struct:s_map	typeref:typename:int
cols	include/so_long_bonus.h	/^	int		cols;$/;"	m	struct:s_map	typeref:typename:int
content	lib/libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
count	include/so_long_bonus.h	/^	int		count;$/;"	m	struct:s_graphics	typeref:typename:int
direction	include/so_long.h	/^	int		direction;$/;"	m	struct:s_player	typeref:typename:int
direction	include/so_long_bonus.h	/^	int			direction;$/;"	m	struct:s_enemy	typeref:typename:int
direction	include/so_long_bonus.h	/^	int		direction;$/;"	m	struct:s_player	typeref:typename:int
download-and-extract-mlx	Makefile	/^download-and-extract-mlx:$/;"	t
e_key	include/so_long.h	/^typedef enum e_key$/;"	g
e_key	include/so_long_bonus.h	/^typedef enum e_key$/;"	g
empty	include/so_long.h	/^	void	*empty;$/;"	m	struct:s_graphics	typeref:typename:void *
empty	include/so_long_bonus.h	/^	void	*empty;$/;"	m	struct:s_graphics	typeref:typename:void *
enemies	include/so_long_bonus.h	/^	int		enemies;$/;"	m	struct:s_map	typeref:typename:int
enemies	include/so_long_bonus.h	/^	t_enemy	*enemies;$/;"	m	struct:s_graphics	typeref:typename:t_enemy *
enemy_movement	src_bonus/enemies_bonus.c	/^static void	enemy_movement(t_game *game, int i, int j, int *enemy_nr)$/;"	f	typeref:typename:void	file:
enemy_movement_extra	src_bonus/enemies_bonus.c	/^static void	enemy_movement_extra(t_game *game, int i, int j, int *enemy_nr)$/;"	f	typeref:typename:void	file:
error_free_msg	src/main.c	/^void	*error_free_msg(char *msg, int flag, t_game *game, char **map)$/;"	f	typeref:typename:void *
error_free_msg	src_bonus/main_bonus.c	/^void	*error_free_msg(char *msg, int flag, t_game *game, char **map)$/;"	f	typeref:typename:void *
error_msg	src/main.c	/^int	error_msg(char *msg, int ret)$/;"	f	typeref:typename:int
error_msg	src_bonus/main_bonus.c	/^int	error_msg(char *msg, int ret)$/;"	f	typeref:typename:int
exit	include/so_long.h	/^	void	*exit;$/;"	m	struct:s_graphics	typeref:typename:void *
exit	include/so_long_bonus.h	/^	void	*exit;$/;"	m	struct:s_graphics	typeref:typename:void *
exit_nr	include/so_long.h	/^	int		exit_nr;$/;"	m	struct:s_map	typeref:typename:int
exit_nr	include/so_long_bonus.h	/^	int		exit_nr;$/;"	m	struct:s_map	typeref:typename:int
exit_x	include/so_long.h	/^	int		exit_x;$/;"	m	struct:s_map	typeref:typename:int
exit_x	include/so_long_bonus.h	/^	int		exit_x;$/;"	m	struct:s_map	typeref:typename:int
exit_y	include/so_long.h	/^	int		exit_y;$/;"	m	struct:s_map	typeref:typename:int
exit_y	include/so_long_bonus.h	/^	int		exit_y;$/;"	m	struct:s_map	typeref:typename:int
fclean	Makefile	/^fclean: clean$/;"	t
fclean	lib/libft/Makefile	/^fclean: clean$/;"	t
flood_fill	src/flood_fill.c	/^static int	flood_fill(t_game *game, int x, int y, char **map)$/;"	f	typeref:typename:int	file:
flood_fill	src_bonus/flood_fill_bonus.c	/^static int	flood_fill(t_game *game, int x, int y, char **map)$/;"	f	typeref:typename:int	file:
free_array_of_strings	lib/libft/free_array_of_strings.c	/^void	free_array_of_strings(char **str)$/;"	f	typeref:typename:void
ft_abs_value	lib/libft/ft_abs_value.c	/^int	ft_abs_value(int n)$/;"	f	typeref:typename:int
ft_atoi	lib/libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_atol	lib/libft/ft_atol.c	/^long long	ft_atol(const char *nptr)$/;"	f	typeref:typename:long long
ft_bzero	lib/libft/ft_bzero.c	/^void	ft_bzero(void *b, size_t len)$/;"	f	typeref:typename:void
ft_calloc	lib/libft/ft_calloc.c	/^void	*ft_calloc(size_t number, size_t size)$/;"	f	typeref:typename:void *
ft_isalnum	lib/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	lib/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	lib/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	lib/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	lib/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	lib/libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	lib/libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *novel)$/;"	f	typeref:typename:void
ft_lstadd_front	lib/libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *novel)$/;"	f	typeref:typename:void
ft_lstclear	lib/libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	lib/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **head, t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	lib/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	lib/libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	lib/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	lib/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	lib/libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_matrixlen	lib/libft/ft_matrixlen.c	/^int	ft_matrixlen(void **matrix)$/;"	f	typeref:typename:int
ft_memchr	lib/libft/ft_memchr.c	/^void	*ft_memchr(const void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_memcmp	lib/libft/ft_memcmp.c	/^int	ft_memcmp(const void *b1, const void *b2, size_t len)$/;"	f	typeref:typename:int
ft_memcpy	lib/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memmove	lib/libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	lib/libft/ft_memset.c	/^void	*ft_memset(void *dest, int c, size_t len)$/;"	f	typeref:typename:void *
ft_printf	lib/libft/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	lib/libft/ft_putchar_fd.c	/^int	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:int
ft_putendl_fd	lib/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_base_fd	lib/libft/ft_putnbr_base_fd.c	/^int	ft_putnbr_base_fd(unsigned long decimal, char *base, int fd)$/;"	f	typeref:typename:int
ft_putnbr_fd	lib/libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:int
ft_putstr_fd	lib/libft/ft_putstr_fd.c	/^int	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:int
ft_split	lib/libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_splitquote	lib/libft/ft_splitquote.c	/^char	**ft_splitquote(char *s, char c)$/;"	f	typeref:typename:char **
ft_splitquote_nulls	lib/libft/quotes_utils.c	/^char	**ft_splitquote_nulls(char *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	lib/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strchrnum	lib/libft/get_next_line_utils.c	/^int	ft_strchrnum(const char *s, int c)$/;"	f	typeref:typename:int
ft_strcmp	lib/libft/ft_strcmp.c	/^int	ft_strcmp(const char *str1, const char *str2)$/;"	f	typeref:typename:int
ft_strdup	lib/libft/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f	typeref:typename:char *
ft_striteri	lib/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	lib/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strjoinfree	lib/libft/get_next_line_utils.c	/^char	*ft_strjoinfree(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strlcat	lib/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	lib/libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlen	lib/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	lib/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	lib/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t len)$/;"	f	typeref:typename:int
ft_strnstr	lib/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	lib/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	lib/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	lib/libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	lib/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	lib/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
get_exit_position	src/flood_fill.c	/^static void	get_exit_position(t_game *game)$/;"	f	typeref:typename:void	file:
get_exit_position	src_bonus/flood_fill_bonus.c	/^static void	get_exit_position(t_game *game)$/;"	f	typeref:typename:void	file:
get_line	lib/libft/get_next_line.c	/^static char	*get_line(char *stash)$/;"	f	typeref:typename:char *	file:
get_next_line	lib/libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_player_position	src/flood_fill.c	/^static void	get_player_position(t_game *game)$/;"	f	typeref:typename:void	file:
get_player_position	src_bonus/flood_fill_bonus.c	/^static void	get_player_position(t_game *game)$/;"	f	typeref:typename:void	file:
get_stash	lib/libft/get_next_line.c	/^static char	*get_stash(int fd, char *stash)$/;"	f	typeref:typename:char *	file:
gold	include/so_long.h	/^	void	*gold;$/;"	m	struct:s_graphics	typeref:typename:void *
gold	include/so_long_bonus.h	/^	void	*gold;$/;"	m	struct:s_graphics	typeref:typename:void *
graphics	include/so_long.h	/^	t_graphics	graphics;$/;"	m	struct:s_game	typeref:typename:t_graphics
graphics	include/so_long_bonus.h	/^	t_graphics	graphics;$/;"	m	struct:s_game	typeref:typename:t_graphics
img_l	include/so_long.h	/^	void	*img_l;$/;"	m	struct:s_player	typeref:typename:void *
img_l	include/so_long_bonus.h	/^	void	*img_l;$/;"	m	struct:s_player	typeref:typename:void *
img_r	include/so_long.h	/^	void	*img_r;$/;"	m	struct:s_player	typeref:typename:void *
img_r	include/so_long_bonus.h	/^	void	*img_r;$/;"	m	struct:s_player	typeref:typename:void *
inquote	lib/libft/quotes.c	/^char	inquote(char *s, int index)$/;"	f	typeref:typename:char
instant_x	include/so_long.h	/^	int		instant_x;$/;"	m	struct:s_player	typeref:typename:int
instant_x	include/so_long_bonus.h	/^	int			instant_x;$/;"	m	struct:s_enemy	typeref:typename:int
instant_x	include/so_long_bonus.h	/^	int		instant_x;$/;"	m	struct:s_player	typeref:typename:int
instant_y	include/so_long.h	/^	int		instant_y;$/;"	m	struct:s_player	typeref:typename:int
instant_y	include/so_long_bonus.h	/^	int			instant_y;$/;"	m	struct:s_enemy	typeref:typename:int
instant_y	include/so_long_bonus.h	/^	int		instant_y;$/;"	m	struct:s_player	typeref:typename:int
is_beginning_quote	lib/libft/quotes.c	/^int	is_beginning_quote(char *s, int index)$/;"	f	typeref:typename:int
is_beginning_wordquote	lib/libft/quotes_utils.c	/^int	is_beginning_wordquote(char *s, int index, char c)$/;"	f	typeref:typename:int
is_end_quote	lib/libft/quotes.c	/^int	is_end_quote(char *s, int index)$/;"	f	typeref:typename:int
is_end_wordquote	lib/libft/quotes_utils.c	/^int	is_end_wordquote(char *s, int index, char c)$/;"	f	typeref:typename:int
isneg	lib/libft/ft_itoa.c	/^char	*isneg(int algcount, int n)$/;"	f	typeref:typename:char *
isquote	lib/libft/quotes.c	/^char	isquote(char *s, int index)$/;"	f	typeref:typename:char
key_hook	src/movements.c	/^int	key_hook(int keycode, t_game *game)$/;"	f	typeref:typename:int
key_hook	src_bonus/movements_bonus.c	/^int	key_hook(int keycode, t_game *game)$/;"	f	typeref:typename:int
main	src/main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
main	src_bonus/main_bonus.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
map	include/so_long.h	/^	char	**map;$/;"	m	struct:s_map	typeref:typename:char **
map	include/so_long.h	/^	t_map		map;$/;"	m	struct:s_game	typeref:typename:t_map
map	include/so_long_bonus.h	/^	char	**map;$/;"	m	struct:s_map	typeref:typename:char **
map	include/so_long_bonus.h	/^	t_map		map;$/;"	m	struct:s_game	typeref:typename:t_map
map_duplicator	src/flood_fill.c	/^static char	**map_duplicator(t_game *game, char **map)$/;"	f	typeref:typename:char **	file:
map_duplicator	src_bonus/flood_fill_bonus.c	/^static char	**map_duplicator(t_game *game, char **map)$/;"	f	typeref:typename:char **	file:
map_duplicator_extra	src/flood_fill_extra.c	/^void	map_duplicator_extra(t_game *game, char **map, int i, int j)$/;"	f	typeref:typename:void
map_duplicator_extra	src_bonus/flood_fill_extra_bonus.c	/^void	map_duplicator_extra(t_game *game, char **map, int i, int j)$/;"	f	typeref:typename:void
map_filler	src/map_ckeck.c	/^static int	map_filler(char *file, t_game *game)$/;"	f	typeref:typename:int	file:
map_filler	src_bonus/map_ckeck_bonus.c	/^static int	map_filler(char *file, t_game *game)$/;"	f	typeref:typename:int	file:
map_filler_extra	src/map_check_extra.c	/^int	map_filler_extra(char **line, int fd)$/;"	f	typeref:typename:int
map_filler_extra	src_bonus/map_check_extra_bonus.c	/^int	map_filler_extra(char **line, int fd)$/;"	f	typeref:typename:int
map_rebuild	src_bonus/mlx_config_extra_bonus.c	/^void	map_rebuild(t_game *game)$/;"	f	typeref:typename:void
map_rebuild_extra	src_bonus/mlx_config_extra_bonus.c	/^void	map_rebuild_extra(t_game *game, int i, int j)$/;"	f	typeref:typename:void
map_render	src/mlx_config.c	/^void	map_render(t_game *game)$/;"	f	typeref:typename:void
map_render	src_bonus/mlx_config_bonus.c	/^int	map_render(t_game *game)$/;"	f	typeref:typename:int
map_render_enemy	src_bonus/enemies_bonus.c	/^void	map_render_enemy(t_game *game, int i, int j, int *enemy_nr)$/;"	f	typeref:typename:void
map_render_enemy_extra	src_bonus/enemies_bonus.c	/^static void	map_render_enemy_extra(t_game *game, int i, int j, int *enemy_nr)$/;"	f	typeref:typename:void	file:
map_render_extra	src/mlx_config.c	/^static void	map_render_extra(t_game *game, int i, int j)$/;"	f	typeref:typename:void	file:
map_render_extra	src_bonus/mlx_config_bonus.c	/^static void	map_render_extra(t_game *game, int i, int j)$/;"	f	typeref:typename:void	file:
map_render_extra1	src_bonus/mlx_config_extra_bonus.c	/^void	map_render_extra1(t_game *game, int i, int j)$/;"	f	typeref:typename:void
mlx	include/so_long.h	/^	void	*mlx;$/;"	m	struct:s_graphics	typeref:typename:void *
mlx	include/so_long_bonus.h	/^	void	*mlx;$/;"	m	struct:s_graphics	typeref:typename:void *
mlx_close	src/mlx_config.c	/^int	mlx_close(t_game *game)$/;"	f	typeref:typename:int
mlx_close	src_bonus/mlx_config_bonus.c	/^int	mlx_close(t_game *game)$/;"	f	typeref:typename:int
mlx_start	src/mlx_config.c	/^void	mlx_start(t_game *game)$/;"	f	typeref:typename:void
mlx_start	src_bonus/mlx_config_bonus.c	/^void	mlx_start(t_game *game)$/;"	f	typeref:typename:void
module	lib/libft/ft_itoa.c	/^long int	module(int n)$/;"	f	typeref:typename:long int
mouth	include/so_long_bonus.h	/^	int			mouth;$/;"	m	struct:s_enemy	typeref:typename:int
mouth_open_l	include/so_long_bonus.h	/^	void	*mouth_open_l;$/;"	m	struct:s_graphics	typeref:typename:void *
mouth_open_r	include/so_long_bonus.h	/^	void	*mouth_open_r;$/;"	m	struct:s_graphics	typeref:typename:void *
mouth_shut_l	include/so_long_bonus.h	/^	void	*mouth_shut_l;$/;"	m	struct:s_graphics	typeref:typename:void *
mouth_shut_r	include/so_long_bonus.h	/^	void	*mouth_shut_r;$/;"	m	struct:s_graphics	typeref:typename:void *
move	src/movements.c	/^static void	move(int x, int y, t_game *game)$/;"	f	typeref:typename:void	file:
move	src_bonus/movements_bonus.c	/^static void	move(int x, int y, t_game *game)$/;"	f	typeref:typename:void	file:
move_extra	src_bonus/movements_bonus.c	/^static void	move_extra(int x, int y, t_game *game)$/;"	f	typeref:typename:void	file:
movement_announcer	src_bonus/mlx_config_extra_bonus.c	/^void	movement_announcer(t_game *game)$/;"	f	typeref:typename:void
moves	include/so_long.h	/^	int			moves;$/;"	m	struct:s_game	typeref:typename:int
moves	include/so_long.h	/^	int		moves;$/;"	m	struct:s_player	typeref:typename:int
moves	include/so_long_bonus.h	/^	int			moves;$/;"	m	struct:s_game	typeref:typename:int
moves	include/so_long_bonus.h	/^	int		moves;$/;"	m	struct:s_player	typeref:typename:int
next	lib/libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next_x	include/so_long_bonus.h	/^	int			next_x;$/;"	m	struct:s_enemy	typeref:typename:int
next_y	include/so_long_bonus.h	/^	int			next_y;$/;"	m	struct:s_enemy	typeref:typename:int
path_checker	src/flood_fill.c	/^int	path_checker(t_game *game)$/;"	f	typeref:typename:int
path_checker	src_bonus/flood_fill_bonus.c	/^int	path_checker(t_game *game)$/;"	f	typeref:typename:int
player	include/so_long.h	/^	t_player	player;	$/;"	m	struct:s_game	typeref:typename:t_player
player	include/so_long_bonus.h	/^	t_player	player;	$/;"	m	struct:s_game	typeref:typename:t_player
player_nr	include/so_long.h	/^	int		player_nr;$/;"	m	struct:s_map	typeref:typename:int
player_nr	include/so_long_bonus.h	/^	int		player_nr;$/;"	m	struct:s_map	typeref:typename:int
prev	lib/libft/libft.h	/^	struct s_list	*prev;$/;"	m	struct:s_list	typeref:struct:s_list *
quote	lib/libft/quotes.c	/^char	quote(char *s, int index)$/;"	f	typeref:typename:char
random_nr	include/so_long_bonus.h	/^	int		random_nr;$/;"	m	struct:s_graphics	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
re	lib/libft/Makefile	/^re: fclean all$/;"	t
rock	include/so_long.h	/^	void	*rock;$/;"	m	struct:s_graphics	typeref:typename:void *
rock	include/so_long_bonus.h	/^	void	*rock;$/;"	m	struct:s_graphics	typeref:typename:void *
rows	include/so_long.h	/^	int		rows;$/;"	m	struct:s_map	typeref:typename:int
rows	include/so_long_bonus.h	/^	int		rows;$/;"	m	struct:s_map	typeref:typename:int
s_enemy	include/so_long_bonus.h	/^typedef struct s_enemy$/;"	s
s_game	include/so_long.h	/^typedef struct s_game$/;"	s
s_game	include/so_long_bonus.h	/^typedef struct s_game$/;"	s
s_graphics	include/so_long.h	/^typedef struct s_graphics$/;"	s
s_graphics	include/so_long_bonus.h	/^typedef struct s_graphics$/;"	s
s_list	lib/libft/libft.h	/^typedef struct s_list$/;"	s
s_map	include/so_long.h	/^typedef struct s_map$/;"	s
s_map	include/so_long_bonus.h	/^typedef struct s_map$/;"	s
s_player	include/so_long.h	/^typedef struct s_player$/;"	s
s_player	include/so_long_bonus.h	/^typedef struct s_player$/;"	s
set_enemy_coordinates	src_bonus/map_check_extra_bonus.c	/^static void	set_enemy_coordinates(t_game *game, int enemy_nr)$/;"	f	typeref:typename:void	file:
set_mlx_images	src/mlx_config.c	/^static void	set_mlx_images(t_game *game)$/;"	f	typeref:typename:void	file:
set_mlx_images	src_bonus/mlx_config_bonus.c	/^static void	set_mlx_images(t_game *game)$/;"	f	typeref:typename:void	file:
smaller	lib/libft/int_size_utils.c	/^int	smaller(int a, int b)$/;"	f	typeref:typename:int
strfiller	lib/libft/ft_split.c	/^static void	strfiller(char *s, char **str, char c)$/;"	f	typeref:typename:void	file:
strfiller	lib/libft/ft_splitquote.c	/^static void	strfiller(char *s, char **str, char c)$/;"	f	typeref:typename:void	file:
strmalloc	lib/libft/ft_split.c	/^static void	strmalloc(int *j, char ***str, int *k)$/;"	f	typeref:typename:void	file:
strmalloc	lib/libft/ft_splitquote.c	/^static void	strmalloc(int *j, char ***str, int *k)$/;"	f	typeref:typename:void	file:
t_enemy	include/so_long_bonus.h	/^}	t_enemy;$/;"	t	typeref:struct:s_enemy
t_game	include/so_long.h	/^}	t_game;$/;"	t	typeref:struct:s_game
t_game	include/so_long_bonus.h	/^}	t_game;$/;"	t	typeref:struct:s_game
t_graphics	include/so_long.h	/^}	t_graphics;$/;"	t	typeref:struct:s_graphics
t_graphics	include/so_long_bonus.h	/^}	t_graphics;$/;"	t	typeref:struct:s_graphics
t_key	include/so_long.h	/^}	t_key;$/;"	t	typeref:enum:e_key
t_key	include/so_long_bonus.h	/^}	t_key;$/;"	t	typeref:enum:e_key
t_list	lib/libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_map	include/so_long.h	/^}	t_map;$/;"	t	typeref:struct:s_map
t_map	include/so_long_bonus.h	/^}	t_map;$/;"	t	typeref:struct:s_map
t_player	include/so_long.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_player	include/so_long_bonus.h	/^}	t_player;$/;"	t	typeref:struct:s_player
typeconversor1	lib/libft/ft_printf.c	/^int	typeconversor1(char ch, va_list args)$/;"	f	typeref:typename:int
typeconversor2	lib/libft/ft_printf.c	/^int	typeconversor2(char ch, va_list args)$/;"	f	typeref:typename:int
win	include/so_long.h	/^	void	*win;$/;"	m	struct:s_graphics	typeref:typename:void *
win	include/so_long_bonus.h	/^	void	*win;$/;"	m	struct:s_graphics	typeref:typename:void *
winnign	include/so_long.h	/^	int			winnign;$/;"	m	struct:s_game	typeref:typename:int
winnign	include/so_long_bonus.h	/^	int			winnign;$/;"	m	struct:s_game	typeref:typename:int
wordcounter	lib/libft/ft_split.c	/^static int	wordcounter(char const *s, char c)$/;"	f	typeref:typename:int	file:
wordcounter	lib/libft/ft_splitquote.c	/^static int	wordcounter(char *s, char c)$/;"	f	typeref:typename:int	file:
wordfiller	lib/libft/ft_split.c	/^static void	wordfiller(char *j, char *str, char c)$/;"	f	typeref:typename:void	file:
wordfiller	lib/libft/ft_splitquote.c	/^static void	wordfiller(char *j, char *str, char c)$/;"	f	typeref:typename:void	file:
